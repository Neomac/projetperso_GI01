{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\tx720\pardeftab720

\f0\fs26 \cf0 Initialiser la Population\
R\'e9p\'e9ter nGen fois\
D\'e9but 
\fs24 \uc0\u8232 
\fs26 	Croiser la Population\
	Trier la Population\
	S\'e9lectionner la Population 
\fs24 \uc0\u8232 
\fs26 Fin\uc0\u8232 Afficher le meilleur Individu de la Population 
\fs24 \
\
\
\
\pard\pardeftab720

\b \cf0 \ul \ulc0 Type abstrait "Individu"
\b0 \ulnone \
\
Liste cha\'een\'e9e\
\
typedef struct element\{\
	typedef unsigned char bit;\
	struct element *I_suivant;\
	\} element;\
\
typedef struct \{\
	element *listebit;\
	int qualite;\
	\} individu;\
\
individu\
	bitlist\
		bit\
		suivant\
\

\b Initialiser indiv:
\b0 \
Utilisation de rand: x=rand() > ou < 16383\
Utilisation de srand(time(NULL)) pour avoir une s\'e9quence pseudo-al\'e9atoire diff\'e9rente \'e0 chaque fois.\
\
Algorithme it\'e9ratif:\
\
Tant que nonvide(indiv) Faire\
	(indiv ->  listebit -> bit) <- random(50%)\
	(indiv -> listebit) <- (indiv -> listebit-> suivant)\
Fait\
Calculer qualit\'e9\
\
Algorithme r\'e9cursif:\
\
\

\b \ul Type abstrait population:
\b0 \ulnone \
\
typedef struct elementpop\{\
	individu *P_individu;\
	struct element *P_suivant;\
	\} element;\
\
typedef elementpop *population;\
\
}
{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\vieww13080\viewh12560\viewkind1
\deftab720
\pard\pardeftab720\qc

\f0\fs22 \cf0 Rapport du projet LO44\
\pard\pardeftab720
\cf0 \
\

\b\fs32 Structures de Donn\'e9es :
\b0\fs22 \
\

\fs28 \ul ListeBit :
\fs22 \ulnone \
\
Nous avons d\'e9finis le type de donn\'e9e ListeBit (ou individu) selon l'\'e9nonc\'e9 sous forme de liste cha\'een\'e9e.\
\
typedef struct elem\{\
	int valeur;\
	struct elem * suivant;\
\}Bit;\
\
typedef Bit * ListeBit;\
\

\fs28 \ul Population :
\fs22 \ulnone \
\
Pour la structure de donn\'e9e Population nous l'avons cr\'e9\'e9 sous forme de liste cha\'een\'e9e d'individus avec pour chaque individu sa qualit\'e9. Garder en m\'e9moire la qualit\'e9 de chaque individu nous permet de ne pas avoir \'e0 la recalculer \'e0 chaque \'e9tape, ceci acc\'e9l\'e9rant le traitement de l'information.\
\
typedef struct elemp\{\
    ListeBit Indiv;\
    float qualite;\
    struct elemp * suivant;\
\}element;\
\
typedef element * Population;\
\
\

\b\fs32 Op\'e9rations \'e9l\'e9mentaires sur les structures de donn\'e9es :
\b0\fs22 \
\

\fs28 \ul ListeBit : 
\fs22 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\qj

\b \cf0 Ajouter_Queue_Indiv:
\b0  ListeBit A * entier v -> ListeBit\
\
R\'e9sultat: \'c0 la fin de la liste de bits A on a rajouter le bit de valeur v\
Index: newel (bit que l'on va rajouter), p (liste utilis\'e9e pour parcourir A)\
\
newel <- CreerI()\
newel->valeur <- v\
\
\ul Si\ulnone  Vide(A) \ul Alors\ulnone \
	A <- newel\
\ul Sinon\ulnone \
	p <- A\
	\ul Tant que\ulnone  Vide(Reste(p)) \ul Faire\ulnone \
		p <- Reste(p)\
	\ul Fait\ulnone \
	p -> suivant <- newel\
\ul Fin Si\ulnone \
\
\

\b PrintList:
\b0  \
\
R\'e9sultat: Imprime les valeurs d'une liste de bits en ligne\
Index: A (liste de bits \'e0 imprimer), I (liste utilis\'e9e pour parcourir A)\
\
\ul Si\ulnone  Vide(A) \ul Alors\ulnone \
	Imprimer("La liste est vide")\
\ul Sinon\ulnone \
	I <- A\
	\ul Tant que\ulnone  NonVide(I) \ul Faire\ulnone \
		Imprimer (Valeur_Tete(I))\
		I <- Reste(I)\
	\ul Fait\ulnone \
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul \ulc0 Fin SI\
\pard\pardeftab720
\cf0 \ulnone \

\fs28 \ul Population :
\fs22 \ulnone \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\qj

\b \cf0 PrintPop:
\b0 \
\
R\'e9sultat: imprime les valeurs des individus d'une liste d'individus en colonne\
Index: A (population \'e0 imprimer)\
\
\ul Si\ulnone  Vide(A) \ul Alors\ulnone \
	Imprimer("La population est vide")\
\ul Sinon\ulnone \
	\ul Tant que\ulnone  NonVide(A) \ul Faire\ulnone \
		PrintList(A -> Indiv)\
		A <- Reste(A)\
	\ul Fait\ulnone \
\ul Fin SI\ulnone \
\

\b PrintPopQualite:
\b0 \
\
R\'e9sultat: Imprime les valeurs des individus et leur qualit\'e9 d'une liste d'individus en colonne\
Index: A (population \'e0 imprimer)\
\
\ul Si\ulnone  Vide(A) \ul Alors\ulnone \
	Imprimer("La population est vide")\
\ul Sinon\ulnone \
	\ul Tant que\ulnone  NonVide(A) \ul Faire\ulnone \
		PrintList(A -> Indiv)\
		Imprimer(A -> qualit\'e9)\
		A <- Reste(A)\
	\ul Fait\ulnone \
\ul Fin SI\ulnone \
\
\

\b Ajouter_Queue_Pop:
\b0 \
\
R\'e9sultat: Ajoute a une population 'A' un individu supplementaire 'indiv' en fin de liste\
Index: A (population \'e0 laquelle on va rajouter un individu), indiv (liste de bits que l'on va rajouter en queue de A), LongIndiv (entier donnant la longueur des individus utilis\'e9 pour calculer leur qualit\'e9)\
\
newel <- CreerP()\
newel -> Indiv <- indiv\
newel -> qualite <- QualiteI(indiv, LongIndiv)\
\
\ul Si\ulnone  Vide(A) \ul Alors\ulnone \
	A <- newel\
\ul Sinon\ulnone \
	p <- A\
	\ul Tant que\ulnone  Vide(Reste(p)) \ul Faire\ulnone \
		p <- Reste(p)\
	\ul Fait\ulnone \
	p -> suivant <- newel\
\ul Fin Si\ulnone \
\
\

\b DernierPop:
\b0  Population P -> Population\
\
Algorithme r\'e9cursif\
R\'e9sultat: Parcourt une liste d'individus et en renvoie le dernier\
Index: P (population \'e0 parcourir)\
\
\ul Si\ulnone  VideP(P) \ul Ou\ulnone  VideP(ResteP(P)) \ul Alors\ulnone \
	Retourner P\
\ul Sinon\ulnone \
	DernierPop <- DernierPop(ResteP(P))\
	Retourner P\
\ul Fin Si\ulnone \
\
\

\b Avant_Dernier_Pop:
\b0  Population P -> Population\
\

\b DernierPop:
\b0  Population P -> Population\
\
Algorithme r\'e9cursif\
R\'e9sultat: Parcourt une liste d'individus et en renvoie l'avant-dernier\
Index: P (population \'e0 parcourir)\
\
\ul Si\ulnone  VideP(P) \ul Ou\ulnone  VideP(ResteP(P)) \ul Ou\ulnone  VideP(ResteP(ResteP(P))) \ul Alors\ulnone \
	Retourner P\
\ul Sinon\ulnone \
	DernierPop <- DernierPop(ResteP(P))\
	Retourner P\
\ul Fin Si\ulnone \
\pard\pardeftab720
\cf0 \
\
\pard\pardeftab720

\b\fs32 \cf0 Algorithme des fonctions :\
\
\pard\pardeftab720

\b0\fs28 \cf0 \ul Initialisation et Selection :\ulnone \
\
\pard\pardeftab720\sl276\slmult1\sa200

\b\fs22 \cf0 InitPopRecur
\b0 \
\
R\'e9sultat :  Creer de maniere recursive une population d'individu aleatoire suivant une probabilit\'e9 donn\'e9 et suivant une taille de pop donn\'e9e.\
InitPopRecur (Population p, int TaillePop, int LongIndiv, int prob) -> Population \
\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul Si\ulnone  TaillePop = 0 \ul alors\ulnone    // TaillePop correspond au compteur pour compter le nombre d'individu \'e0 ajouter \'e0 la population\
	p -> Null   // On marque la fin de la population par l'ajouter de l'element Null\
\ul Sinon\ulnone \
InitPopRecur ( p, TaillePop, LongIndiv, prob) = ajouter_queue_pop( InitPopRecur( p, TaillePop -1, LongIndiv, prob), InitialiserIndivRecursif(LongIndiv, prob), Longindiv)\
//  Definition r\'e9cursive de InitPopRecur\
\
\pard\pardeftab720\sl276\slmult1\sa200

\b \cf0 InitPopIter
\b0 \
R\'e9sultat : Creer de maniere i\'e9rative une population d'individu aleatoire suivant une probabilit\'e9 donn\'e9 et suivant une taille de pop donn\'e9e.\
\
InitPopIter (Population p, int TaillePop, int LongIndiv, int prob) -> Population p\
p = creerP()\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul Pour\ulnone  i de 0 \'e0 TaillePop \ul faire\ulnone \
	p = ajouter_queue_pop(p, InitialiserIndivRecursif (LongIndiv, prob), LongIndiv)\
\ul Fait\ulnone \
\
\pard\pardeftab720\sl276\slmult1\sa200

\b \cf0 PickIP
\b0 \
R\'e9sultat : Selection un Individu au hasard dans une population\
PickIP (Population, p, int TaillePop) -> Indiv\
n = RandomN(TaillePop)   // On choisi al\'e9atoirement un nombre compris entre 1 et TaillePop\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul Tant que \ulnone i < n \ul faire\ulnone \
p = ResteP(p)   // On passe au suivant pour trouver l'individu voulu\
i= i+1\
\pard\pardeftab720
\cf0 \ul fait\
\
\pard\pardeftab720\sl276\slmult1\sa200

\b \cf0 \ulnone SelectP\

\b0 R\'e9sultat : Population p avec en fin de liste les tSelect premiers individus recopi\'e9  a la fin de la liste\
SelectP( Population p, int tSelect, int taillePop, int LongIndiv) -> Population p\
tSelect = (taillePop*tSelect)/100\
Population tamp = p\
i = 1\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul Tant que\ulnone  i < tSelect \ul faire\ulnone \
	tamp = ResteP(tamp)\
	i = i+1\
\ul Fait\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ulnone Troncature de la liste :\
tamp -> suivant = Null\
Recopie des \'e9l\'e9ments pour completer la liste :\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul Pour\ulnone  i de 1 \'e0 taillePop/tSelect \ul faire\ulnone \
	RecopierP (tamp, p, tSelect, LongIndiv)\
\ul Fait\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ulnone RecopierP (tamp, p, tSelect, LongIndiv)   // On fait appel une derniere fois \'e0 RecopierP au cas ou tSelect ne soit pas un multiple de TaillePop\
\

\b coller_liste\

\b0 R\'e9sultat : Population qui est le resultat du collage de deux populations\
coller_liste( Population A, Population B) -> Population p\
Population temp = A\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul Tant que\ulnone  (temp ->suivant != Null) \ul faire\ulnone \
	temp = temp-> suivant\
\ul Faire\ulnone \
temp -> suivant = B\
\ul Fait\
\
\pard\pardeftab720\sl276\slmult1\sa200

\fs28 \cf0 Croiser Population :\
\
\pard\pardeftab720\sl276\slmult1\sa200

\b\fs22 \cf0 \ulnone CroiserP
\b0 \
R\'e9sultat : Croisement d'une population\
\
CroiserP ( Population p1, int TaillePop, int pCroise, int LongIndiv) -> Population p2\
Initialisation :\
Population p2 = CreerP()\
Population tamp1 = CreerP()\
Population tamp2 = CreerP()\
\
Ajout des 2 individus a p2 :\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul Tant que \ulnone i <= TaillePop \ul faire\ulnone \
// On choisit 2 individu au hasard dans p1 pour les mettre dans p2\
	p2 = ajouter-queue-pop ( p2, PickIP(p1, TaillePop), LongIndiv)\
	p2 = ajouter-queue-pop ( p2, PickIP(p1, TaillePop), LongIndiv)\
// Croisement des 2 individus ajout\'e9s :\
	tamp1 = p2\
	tamp2 = p2\
	tamp1 = Avant_Dernier_Pop(p2)\
	tamp2 = Dernier_Pop(p2)\
	CroiserI (tamp1->Indiv, tamp2->Indiv, pCroise)\
	i = i+1\
	i= i+1\
// Recalcul des qualites\
	QualiteP(p2, LongIndiv)\
\ul Fait\ulnone \
\
\
\pard\pardeftab720\sl276\slmult1\sa200

\fs28 \cf0 \ul Fonctions necessaire au Quicksort : Qualite, Recopier, Coller_Liste :\
\pard\pardeftab720\sl276\slmult1\sa200

\b\fs22 \cf0 \ulnone QualiteP
\b0 \
R\'e9sultat : Calcul des qualite des individus d'une population\
\
QualiteP(Population p, int LongIndiv) -> Population P   // Recalcule la qualit\'e9 des individus de la population\
\
Population P = p\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul Tant que \ulnone (NonVide(p)) \ul faire\ulnone \
	P -> qualite = QualiteI( p -> Indiv, LongIndiv)   // On ajoute la qualite a la population\
	P = ResteP(P)\
\ul Fait\ulnone \
\
\pard\pardeftab720\sl276\slmult1\sa200

\b \cf0 RecopierP\

\b0 R\'e9sultat : Population p2 avec nbindiv de p1 recopi\'e9 \'e0 la ifn de p2\
RecopierP( Population p2, Population p1, int nbindiv, int LongIndiv ) -> Population p2\
\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul Si\ulnone  nbindiv = 0 \ul alors\ulnone \
	Rien\
\ul Sinon\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ulnone 	p2 = ajouter_queu_pop ( p2, p1 ->Indiv, LongIndiv)\
	RecopierP ( p2, ResteP(p1), nbindiv-1, LongIndiv)\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 \ul FinSi\
\pard\pardeftab720\sl276\slmult1\sa200

\fs28 \cf0 Quicksort :\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720

\fs22 \cf0 \ulnone R\'e9sultat : Population avec des individus tri\'e9s par qualit\'e9 croissante\
\
Parametrage : quicksort: population A -> population\
\

\b Cas trivial:
\b0 \
\
Si vide(A) Alors\
	quicksort=A\
Fin si\
\

\b Cas g\'e9n\'e9ral:
\b0 \
\
Creer(S1)\
Creer(S2)\
Creer(P)\
quicksort <- \'e9l\'e9ment_t\'eate(A))\
A <- Reste(A)\
\
Tant que non_vide(A) Faire\
	Si qualite(\'e9l\'e9ment_t\'eate((quicksort))) < qualite(\'e9l\'e9ment_t\'eate(A))) Faire\
		S1 <- ajouter_queue(element_tete(A))\
	Sinon\
		S2 <- ajouter_queue(element_tete(A))\
	Fin Si\
	A <- Reste(A)\
Fait\
\
Si non_vide (S1) Alors\
	quicksort <- coller_liste(quicksort(S1), quicksort)\
Fin Si\
Si non_vide (S2) Alors\
	quicksort <- coller_liste(quicksort, quicksort(S2))\
Fin Si\
\

\b Algorithme:
\b0 \
\
Si vide(A) Alors\
	quicksort=A\
Sinon\
	Creer(S1)\
	Creer(S2)\
	quicksort <- \'e9l\'e9ment_t\'eate(A))\
	A <- Reste(A)\
\
	Tant que non_vide(A) Faire\
		Si qualite(\'e9l\'e9ment_t\'eate((quicksort))) < qualite(\'e9l\'e9ment_t\'eate(A))) Faire\
			S1 <- ajouter_queue(element_tete(A))\
		Sinon\
			S2 <- ajouter_queue(element_tete(A))\
		Fin Si\
		A <- Reste(A)\
	Fait\
	Si non_vide (S1) Alors	\
		quicksort <- coller_liste(quicksort(S1), quicksort)\
	Fin Si\
	Si non_vide (S2) Alors\
		quicksort <- coller_liste(quicksort, quicksort(S2))\
	Fin Si\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 Fin Si\
\
\
\
\pard\pardeftab720\sl276\slmult1\sa200

\b\fs32 \cf0 Difficult\'e9s rencontr\'e9es lors de la r\'e9alisation du projet :\
\

\b0\fs24 + R\'e9alisation du MakeFile :\
Apr\'e8s moult essaies infructueux cette \'e9tapes fut abandonn\'e9e. La compilation se passe bien lorsqu'elle est r\'e9alis\'e9 \'e0 la main ou sous un IDE, mais de nombreuses erreurs li\'e9es aux "includes" ressortent lorsque l'on utilise le MakeFile.\
Cela n'a pas d'influence sur le fonctionnement du logiciel mais nous n'avons pas r\'e9ussi a comprendre nos erreur sur le MakeFile.\
\
+ Comprehension du Quicksort :\
L'\'e9nonc\'e9 a \'e9t\'e9 difficile a comprendre pour un des membre du bin\'f4me. C'est l'esprit de l'algorithme qui n'est pas forcement explicite \'e0 la lecture de l'\'e9nonc\'e9. En effet celui ci avait compris que l'algorithme devait couper la liste en un point pr\'e9cis pour donner deux liste bien ordonn\'e9es.\
Hors cela est impossible et il faut cr\'e9er les deux liste en y pla\'e7ant les \'e9l\'e9ments de la liste de base en fonction de leur qualit\'e9.\
+ Algorithme du tSelect et CroiserP :\
Nous avons \'e9galement rencontr\'e9 des difficult\'e9s dans la compr\'e9hension de la partie "s\'e9lection" des individus ; en effet nous avons au d\'e9part compris que la fonction avait pour but de remplacer les 'tSelect' derniers individus d'une population par les premiers individus.\
+ Utilisation de srand :\
Nous avants constat\'e9 qu'au bout d'un certain nombre de g\'e9n\'e9ration, on n'obtenais plus qu'un sue individu dans la population. Nous pensons que cela est du au manque de pr\'e9cision de notre fonction random.\
Nous avons cherch\'e9 d'auter fonction que srand pour obtenir de l'al\'e9atoire mais il est explicitement demand\'e9 dans le sujet d'utiliser rand, srand et time. Nous n'avons donc pas trouv\'e9 comment r\'e9soudre le probl\'e8me.\
\
Le reste du projet n'a pas pos\'e9 de difficult\'e9s majeures.\
\
\

\b\fs32 Jeu de test du logiciel :
\b0\fs22 \
Nous avons test\'e9 notre programme dans diff\'e9rentes conditions:\
Les r\'e9sultats complets sont situ\'e9s en annexes dans le r\'e9pertoire "Jeux d'essais".\
\
\pard\pardeftab720\sl276\slmult1\sa200

\b \cf0 Tests sur le param\'e8tre "tSelect":
\b0 \
Nous avons fait une premi\'e8re s\'e9rie de tests sur le param\'e8tre tSelect en lui donnant 3 valeurs diff\'e9rentes: 10%, 50% et 90% pour les trois longueurs d'individus diff\'e9rentes.\
Les autres param\'e8tre utilis\'e9s sont les suivants:\
pCroise = 50%\
TaillePop = 200 individus\
nGen = 200 g\'e9n\'e9rations\
\
Le tableau ci-dessous donne la g\'e9n\'e9ration \'e0 partir de laquelle il n'y a plus qu'un seul type d'individu dans chaque population.\
\
INSERT TABLE!\
Nous avons constat\'e9 qu'\'e0 tSelect=90% les r\'e9sultats sont tr\'e8s variables, la valeur donn\'e9e ici est donc une moyenne de ces r\'e9sultats.\
\
Nous pouvons donc en d\'e9duire que la longueur des individus et donc la formule de qualit\'e9 n'ont pas d'influence sur le nombre de g\'e9n\'e9rations n\'e9cessaires \'e0 l'obtention d'une population \'e0 une seule sorte d'individu.\
\

\b Tests sur le param\'e8tre "TaillePop":
\b0 \
Nous avons ensuite r\'e9alis\'e9 une s\'e9rie de tests similaires sur le param\'e8tre TaillePop en lui donnant l\'e0 aussi 3 valeurs diff\'e9rents: 20, 110 et 200 individus pour les 3 longueurs d'individus diff\'e9rentes:\
Les autres param\'e8tres utilis\'e9s sont les suivants:\
\pard\pardeftab720\sl276\slmult1\sa200
\cf0 pCroise = 50%\
tSelect = 50%\
nGen = 200 g\'e9n\'e9rations\
De m\'eame, le tableau ci-dessous donne la g\'e9n\'e9ration \'e0 partir de laquelle il n'y a plus qu'un seul type d'individu dans chaque population.\
INSERT TABLE!\
Nous pouvons donc en d\'e9duire que la taille de la population n'a pas d'influence sur le nombre de g\'e9n\'e9ration n\'e9cessaires \'e0 l'obtention d'une population \'e0 une seule sorte d'individu et que seul le taux de s\'e9lection influe.}